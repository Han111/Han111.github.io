I"6*<blockquote>
  <p>这篇文章转载自<a href="https://www.zhihu.com/question/20081359/answer/275107187">我在知乎上的回答</a></p>
</blockquote>

<p>我用 Python 伪代码来解释下，我觉得对这个问题有兴趣的应该都是有点编程基础的，所以直接上 code 应该是最容易的。</p>

<h2 id="背景知识">背景知识</h2>

<p>「停机问题」研究的是：是否存在一个「程序」，能够判断另外一个「程序」在特定的「输入」下，是会给出结果（停机），还是会无限执行下去（不停机）。</p>

<p>在下文中，我们用「函数」来表示「程序」，「函数返回」即表示给出了结果。</p>

<h2 id="正文">正文</h2>

<p>我们假设存在这么一个「停机程序」，不管它是怎么实现的，但是它能够回答「停机问题」：它接受一个「程序」和一个「输入」，然后判断这个「程序」在这个「输入」下是否能给出结果：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">is_halt</span><span class="p">(</span><span class="n">program</span><span class="p">,</span> <span class="nb">input</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
  <span class="c1"># 返回 True  如果 program(input) 会返回
</span>  <span class="c1"># 返回 False 如果 program(input) 不返回
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>（在这里，我们通过把一个函数作为另一个函数的输入来描述一个「程序」作为另一个「程序」的「输入」，如果你不熟悉「头等函数」的概念，你可以把所有文中的函数对应为一个具备该函数的对象。）</p>

<p>为了帮助大家理解这个「停机程序」的功能，我们举个使用它的例子：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">halt</span> <span class="kn">import</span> <span class="n">is_halt</span>

<span class="k">def</span> <span class="nf">loop</span><span class="p">():</span>
  <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
      <span class="k">pass</span>

<span class="c1"># 如果输入是 0，返回，否则无限循环
</span><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="nb">input</span><span class="p">):</span>
  <span class="k">if</span> <span class="nb">input</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">return</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">loop</span><span class="p">()</span>

<span class="n">is_halt</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># 返回 True
</span><span class="n">is_halt</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>  <span class="c1"># 返回 False
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>是不是很棒？</p>

<p>不过，如果这个「停机程序」真的存在，那么我就可以写出这么一个「hack 程序」：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">halt</span> <span class="kn">import</span> <span class="n">is_halt</span>

<span class="k">def</span> <span class="nf">loop</span><span class="p">():</span>
  <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
      <span class="k">pass</span>

<span class="k">def</span> <span class="nf">hack</span><span class="p">(</span><span class="n">program</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">is_halt</span><span class="p">(</span><span class="n">program</span><span class="p">,</span> <span class="n">program</span><span class="p">):</span>
    <span class="n">loop</span><span class="p">()</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">return</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这个程序说，如果你 <code class="highlighter-rouge">is_halt</code> 对 <code class="highlighter-rouge">program(program)</code> 判停了，我就无限循环；如果你判它不停，我就立刻返回。</p>

<p>那么，如果我们把「hack 程序」同时当做「程序」和「输入」喂给「停机程序」，会怎么样呢？</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">is_halt</span><span class="p">(</span><span class="n">hack</span><span class="p">,</span> <span class="n">hack</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>你会发现，如果「停机程序」认为 <code class="highlighter-rouge">hack(hack)</code> 会给出结果，即 <code class="highlighter-rouge">is_halt(hack, hack)</code>) 返回 <code class="highlighter-rouge">True</code>) ，那么实际上 <code class="highlighter-rouge">hack(hack)</code> 会进入无限循环。而如果「停机程序」认为 <code class="highlighter-rouge">hack(hack)</code> 不会给出结果，即 <code class="highlighter-rouge">is_halt(hack, hack)</code> 返回 ，那么实际上 <code class="highlighter-rouge">hack(hack)</code> 会立刻返回结果……</p>

<p>这里就出现了矛盾和悖论，所以我们只能认为，我们最开始的假设是错的：</p>

<p><strong>这个「停机程序」是不存在的。</strong></p>

<h2 id="意义">意义</h2>

<p>简单的说，「停机问题」说明了现代计算机并不是无所不能的。</p>

<p>上面的例子看上去是刻意使用「自我指涉」来进行反证的，但这只是为了证明方便。实际上，现实中与「停机问题」一样是现代计算机「不可解」的问题还有很多，比如所有「判断一个程序是否会在某输入下怎么样？」的算法、Hilbert 第十问题等等，wikipedia 甚至有一个 <a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/List_of_undecidable_problems">List of undecidable problems</a>。</p>

<h2 id="漫谈">漫谈</h2>

<p>如果你觉得只是看懂了这个反证法没什么意思：</p>

<ol>
  <li>最初图灵提出「停机问题」只是针对「图灵机」本身的，但是其意义可以被推广到所有「算法」、「程序」、「现代计算机」甚至是「量子计算机」。</li>
  <li>实际上「图灵机」只能接受（纸带上的）字符串，所以在图灵机编程中，无论是「输入」还是另一个「图灵机」，都是通过编码来表示的。</li>
  <li>「图灵机的计算能力和现代计算机是等价的」，更严谨一些，由于图灵机作为一个假象的计算模型，其储存空间是无限大的，而真实计算机则有硬件限制，所以我们只能说「不存在比图灵机计算能力更强的真实计算机」。</li>
  <li>这里的「计算能力」（power）指的是「能够计算怎样的问题」（capablity）而非「计算效率」（efficiency），比如我们说「上下文无关文法」比「正则表达式」的「计算能力」强因为它能解决更多的计算问题。</li>
  <li>「图灵机」作为一种计算模型形式化了「什么是算法」这个问题（<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Church%25E2%2580%2593Turing_thesis">邱奇－图灵论题</a>）。但图灵机并不是唯一的计算模型，其他计算模型包括「<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Lambda_calculus">Lambda 算子</a>」、<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/%25CE%259C-recursive_function">μ-递归函数</a>」等，它们在计算能力上都是与「图灵机」等价的。因此，我们可以用「图灵机」来证明「<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Computable_function">可计算函数</a>」的上界。也因此可以证明哪些计算问题是超出上界的（即不可解的）。</li>
  <li>需要知道的是，只有「可计算的」才叫做「算法」。</li>
  <li>「停机问题」响应了「哥德尔的不完备性定理」。</li>
</ol>

<h2 id="拓展阅读">拓展阅读：</h2>

<p>中文：</p>

<ul>
  <li>
    <p><a href="https://link.zhihu.com/?target=http%3A//www.matrix67.com/blog/archives/55">Matrix67: 不可解问题(Undecidable Decision Problem)</a></p>
  </li>
  <li>
    <p><a href="https://link.zhihu.com/?target=http%3A//www.matrix67.com/blog/archives/901">Matrix67: 停机问题、Chaitin 常数与万能证明方法</a></p>
  </li>
  <li>
    <p><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/pongba/article/details/1336028">刘未鹏：康托尔、哥德尔、图灵–永恒的金色对角线(rev#2) - CSDN 博客</a></p>
  </li>
  <li>
    <p><a href="https://link.zhihu.com/?target=http%3A//www.changhai.org/articles/science/mathematics/hilbert10/1.php">卢昌海：Hilbert 第十问题漫谈 (上)</a></p>
  </li>
</ul>

<p>英文：</p>

<ul>
  <li>
    <p><a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Introduction_to_the_Theory_of_Computation">《Introduction to the Theory of Computation》</a></p>
  </li>
  <li>
    <p><a href="https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DdNRDvLACg5Q">Turing Machines Explained - Computerphile</a></p>
  </li>
  <li>
    <p><a href="https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DmacM_MtS_w4%26t%3D29s">Turing &amp; The Halting Problem - Computerphile</a></p>
  </li>
  <li>
    <p><a href="https://link.zhihu.com/?target=https%3A//cs.stackexchange.com/questions/32845/why-really-is-the-halting-problem-so-important">Why, really, is the Halting Problem so important?</a></p>
  </li>
</ul>
:ET